// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
window.mindfulShopperContext = {
  isValid: false,
  initialized: false
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
function isExtensionContextValid() {
  try {
    if (typeof chrome === 'undefined' || !chrome.runtime || !chrome.runtime.id) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (chrome.runtime.lastError) {
      return false;
    }
    
    return true;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function updateContextState() {
  window.mindfulShopperContext.isValid = isExtensionContextValid();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
updateContextState();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ popup
async function createMindfulPopup() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  updateContextState();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º popup
  if (!window.mindfulShopperContext.isValid) {
    console.warn('Extension context invalid, cannot create popup');
    showNotification('Extension context invalid - please reload the page', 'warning');
    return;
  }

  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π popup –µ—Å–ª–∏ –µ—Å—Ç—å
  const existingPopup = document.getElementById('mindful-popup');
  if (existingPopup) {
    existingPopup.remove();
  }

  const popup = document.createElement('div');
  popup.id = 'mindful-popup';
  popup.style.cssText = `
    position: fixed !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    z-index: 2147483647 !important;
    background: white !important;
    border-radius: 12px !important;
    box-shadow: 0 20px 40px rgba(0,0,0,0.3) !important;
    padding: 24px !important;
    max-width: 600px !important;
    width: 90% !important;
    max-height: 80vh !important;
    overflow-y: auto !important;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
    border: 1px solid #e0e0e0 !important;
  `;

  const itemName = document.title;
  const productInfo = extractProductInfo();

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const getLocalizedMessage = (key, fallback) => {
    if (isExtensionContextValid()) {
      try {
        return chrome.i18n.getMessage(key) || fallback;
      } catch (error) {
        return fallback;
      }
    }
    return fallback;
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  popup.innerHTML = `
    <div style="text-align: center; margin-bottom: 20px;">
      <div style="font-size: 48px; margin-bottom: 10px;">üõí</div>
      <h2 style="margin: 0 0 8px 0; color: #333; font-size: 20px;">${getLocalizedMessage('extension_name', 'Mindful Shopper')}</h2>
      <p style="margin: 0; color: #666; font-size: 14px;">${getLocalizedMessage('pause_before_purchase', 'Pause before you purchase. Choose mindfully.')}</p>
    </div>
    
    <div style="background: #f8f9fa; padding: 16px; border-radius: 8px; margin-bottom: 20px;">
      <h3 style="margin: 0 0 8px 0; font-size: 16px; color: #333;">${productInfo.name}</h3>
      ${productInfo.price ? `<p style="margin: 0; color: #666; font-size: 14px;">${productInfo.price}</p>` : ''}
    </div>

    <div style="margin-bottom: 20px;">
      <h4 style="margin: 0 0 12px 0; color: #333; font-size: 14px; display: flex; align-items: center;">
        <span style="margin-right: 8px;">üí∞</span>
        ${getLocalizedMessage('stores_for_purchase', 'Stores for purchase')}
      </h4>
      <div id="stores-list" style="max-height: 200px; overflow-y: auto; border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px; text-align: center;">
        <div style="display: flex; align-items: center; justify-content: center; color: #666;">
          <div style="margin-right: 10px;">‚è≥</div>
          <div>${getLocalizedMessage('loading_prices', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω...')}</div>
        </div>
      </div>
    </div>

    <div style="text-align: center;">
      <button id="close-popup-btn" style="
        background: #f5f5f5;
        color: #666;
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 8px 16px;
        font-size: 12px;
        cursor: pointer;
      ">${getLocalizedMessage('close', 'Close')}</button>
    </div>
  `;

  document.body.appendChild(popup);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  const closePopupBtn = popup.querySelector('#close-popup-btn');
  closePopupBtn.addEventListener('click', () => {
    popup.remove();
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const stores = await getPriceComparisonStores(productInfo.name, productInfo.price);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
  const storesList = popup.querySelector('#stores-list');
  storesList.innerHTML = stores.slice(0, 3).map(store => `
    <div style="display: flex; align-items: center; padding: 12px; border-bottom: 1px solid #f0f0f0; transition: background 0.2s;" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='white'">
      <div style="width: 32px; height: 32px; background: #f0f0f0; border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-right: 12px; font-size: 16px;">
        ${store.icon}
      </div>
      <div style="flex: 1; min-width: 0;">
        <div style="font-weight: 600; color: #333; font-size: 13px; margin-bottom: 2px;">${store.name}</div>
        <div style="font-size: 11px; color: #666;">${store.description}</div>
      </div>
      <div style="display: flex; flex-direction: column; align-items: flex-end; margin-left: 12px;">
        <div style="font-weight: bold; color: #2e7d32; font-size: 14px;">${store.price}</div>
        <a href="${store.url}" target="_blank" style="
          background: #ff9800;
          color: white;
          text-decoration: none;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 10px;
          font-weight: 600;
          margin-top: 4px;
          transition: all 0.2s;
        " onmouseover="this.style.background='#f57c00'" onmouseout="this.style.background='#ff9800'">
          ${getLocalizedMessage('to_store', 'To store')}
        </a>
      </div>
    </div>
  `).join('');

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (stores.length > 3) {
    const showMoreBtn = document.createElement('button');
    showMoreBtn.id = 'show-more-stores';
    showMoreBtn.style.cssText = `
      width: 100%;
      background: #f8f9fa;
      color: #495057;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      padding: 8px 12px;
      font-size: 12px;
      font-weight: 600;
      cursor: pointer;
      margin-top: 8px;
      transition: all 0.2s;
    `;
    showMoreBtn.textContent = `${getLocalizedMessage('show_more_stores', '–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ –º–∞–≥–∞–∑–∏–Ω–∏')} (${stores.length - 3})`;
    
    showMoreBtn.addEventListener('click', () => {
      storesList.innerHTML = stores.map(store => `
        <div style="display: flex; align-items: center; padding: 12px; border-bottom: 1px solid #f0f0f0; transition: background 0.2s;" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='white'">
          <div style="width: 32px; height: 32px; background: #f0f0f0; border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-right: 12px; font-size: 16px;">
            ${store.icon}
          </div>
          <div style="flex: 1; min-width: 0;">
            <div style="font-weight: 600; color: #333; font-size: 13px; margin-bottom: 2px;">${store.name}</div>
            <div style="font-size: 11px; color: #666;">${store.description}</div>
          </div>
          <div style="display: flex; flex-direction: column; align-items: flex-end; margin-left: 12px;">
            <div style="font-weight: bold; color: #2e7d32; font-size: 14px;">${store.price}</div>
            <a href="${store.url}" target="_blank" style="
              background: #ff9800;
              color: white;
              text-decoration: none;
              padding: 4px 8px;
              border-radius: 4px;
              font-size: 10px;
              font-weight: 600;
              margin-top: 4px;
              transition: all 0.2s;
            " onmouseover="this.style.background='#f57c00'" onmouseout="this.style.background='#ff9800'">
              ${getLocalizedMessage('to_store', 'To store')}
            </a>
          </div>
        </div>
      `).join('');
      showMoreBtn.style.display = 'none';
    });

    storesList.parentNode.appendChild(showMoreBtn);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫
  const adSection = document.createElement('div');
  adSection.style.cssText = `
    margin-bottom: 20px;
    padding: 16px;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
  `;
  adSection.innerHTML = `
    <div style="text-align: center; margin-bottom: 12px;">
      <span style="font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 0.5px;">Advertisement</span>
    </div>
    <div id="google-ads" style="
      width: 100%;
      height: 100px;
      background: #ffffff;
      border: 1px solid #dee2e6;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #6c757d;
      font-size: 12px;
      text-align: center;
    ">
      <div>
        <div style="font-size: 24px; margin-bottom: 4px;">üì¢</div>
        <div>Google AdSense</div>
        <div style="font-size: 10px; margin-top: 2px;">–†–µ–∫–ª–∞–º–∞ –±—É–¥–µ —Ç—É—Ç</div>
      </div>
    </div>
  `;

  // –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeButton = popup.querySelector('#close-popup-btn');
  closeButton.parentNode.insertBefore(adSection, closeButton);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ popup
  popup.addEventListener('click', (e) => {
    if (e.target === popup) {
      popup.remove();
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –∏ —è–∑—ã–∫–∞
function detectRegionAndLanguage() {
  const hostname = window.location.hostname;
  const language = navigator.language || navigator.userLanguage;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ –¥–æ–º–µ–Ω—É
  if (hostname.includes('.ua') || hostname.includes('rozetka') || hostname.includes('prom')) {
    return { region: 'ukraine', language: 'uk' };
  } else if (hostname.includes('.de') || hostname.includes('.fr') || hostname.includes('.es') || hostname.includes('.it') || 
             hostname.includes('mediamarkt') || hostname.includes('saturn') || hostname.includes('idealo')) {
    return { region: 'europe', language: language.split('-')[0] };
  } else if (hostname.includes('.com') || hostname.includes('amazon')) {
    return { region: 'america', language: 'en' };
  } else if (language.startsWith('uk')) {
    return { region: 'ukraine', language: 'uk' };
  } else if (language.startsWith('de') || language.startsWith('fr') || language.startsWith('es')) {
    return { region: 'europe', language: language.split('-')[0] };
  } else {
    return { region: 'america', language: 'en' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
function getCurrentStore() {
  const hostname = window.location.hostname.toLowerCase();
  
  // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã
  if (hostname.includes('rozetka')) return 'Rozetka';
  if (hostname.includes('prom.ua')) return 'Prom.ua';
  if (hostname.includes('comfy')) return 'Comfy';
  if (hostname.includes('foxtrot')) return 'Foxtrot';
  if (hostname.includes('allo')) return 'Allo';
  
  // –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã
  if (hostname.includes('amazon.de')) return 'Amazon';
  if (hostname.includes('mediamarkt')) return 'MediaMarkt';
  if (hostname.includes('saturn')) return 'Saturn';
  if (hostname.includes('zalando')) return 'Zalando';
  if (hostname.includes('idealo')) return 'Idealo';
  
  // –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã
  if (hostname.includes('amazon.com')) return 'Amazon';
  if (hostname.includes('ebay')) return 'eBay';
  if (hostname.includes('walmart')) return 'Walmart';
  if (hostname.includes('bestbuy')) return 'Best Buy';
  if (hostname.includes('target')) return 'Target';
  
  return null; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å –≤–Ω–µ—à–Ω–∏—Ö —Å–∞–π—Ç–æ–≤ —á–µ—Ä–µ–∑ background script
async function getExternalPrice(storeName, productName, currentPrice, region = 'ukraine') {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ background script –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    const response = await new Promise((resolve) => {
      chrome.runtime.sendMessage({
        action: 'getPrice',
        storeName: storeName,
        productName: productName,
        region: region
      }, (response) => {
        resolve(response);
      });
    });

    if (response && response.success && response.price) {
      return response.price;
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    console.warn(`Failed to get real price from ${storeName}, using fallback`);
    return getFallbackPrice(currentPrice, region);
  } catch (error) {
    console.warn(`Failed to get price from ${storeName}:`, error);
    return getFallbackPrice(currentPrice, region);
  }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã
function getFallbackPrice(currentPrice, region = 'ukraine') {
  try {
    let basePrice = parseFloat(currentPrice?.replace(/[^\d.,]/g, '').replace(',', '.')) || 1000;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    if (basePrice > 50000) {
      basePrice = 50000; // –ú–∞–∫—Å–∏–º—É–º 50,000 –¥–ª—è fallback
    } else if (basePrice < 100) {
      basePrice = 1000; // –ú–∏–Ω–∏–º—É–º 1,000 –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞
    }
    
    // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    let variation;
    if (basePrice < 1000) {
      variation = 0.15; // ¬±15% –¥–ª—è –¥–µ—à–µ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    } else if (basePrice < 10000) {
      variation = 0.12; // ¬±12% –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    } else {
      variation = 0.08; // ¬±8% –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    }
    
    const randomFactor = 1 + (Math.random() - 0.5) * variation;
    const estimatedPrice = Math.round(basePrice * randomFactor);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞
    switch (region) {
      case 'ukraine':
        return `${estimatedPrice.toLocaleString('uk-UA')}‚Ç¥`;
      case 'europe':
        return `‚Ç¨${estimatedPrice.toLocaleString('de-DE')}`;
      case 'america':
        return `$${estimatedPrice.toLocaleString('en-US')}`;
      default:
        return `${estimatedPrice.toLocaleString('uk-UA')}‚Ç¥`;
    }
  } catch (error) {
    console.warn('Fallback price generation error:', error);
    return '–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
async function getPriceComparisonStores(productName, currentPrice) {
  const { region, language } = detectRegionAndLanguage();
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const getLocalizedMessage = (key, fallback) => {
    if (isExtensionContextValid()) {
      try {
        return chrome.i18n.getMessage(key) || fallback;
      } catch (error) {
        return fallback;
      }
    }
    return fallback;
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–≥–∞–∑–∏–Ω –ø–æ URL
  const currentStore = getCurrentStore();
  
  let stores = [];

  // –ú–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã
  if (region === 'ukraine') {
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
    const allStores = [
      {
        name: 'Rozetka',
        icon: 'üè™',
        description: getLocalizedMessage('rozetka_description', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'),
        url: `https://rozetka.com.ua/search/?text=${encodeURIComponent(productName)}`
      },
      {
        name: 'Prom.ua',
        icon: 'üõçÔ∏è',
        description: getLocalizedMessage('prom_description', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω'),
        url: `https://prom.ua/search?search_term=${encodeURIComponent(productName)}`
      },
      {
        name: 'Comfy',
        icon: 'üè†',
        description: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏',
        url: `https://comfy.ua/search/?text=${encodeURIComponent(productName)}`
      },
      {
        name: 'Foxtrot',
        icon: 'ü¶ä',
        description: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω—ñ–∫–∏',
        url: `https://www.foxtrot.com.ua/uk/search?query=${encodeURIComponent(productName)}`
      },
      {
        name: 'Allo',
        icon: 'üì±',
        description: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –º–æ–±—ñ–ª—å–Ω–∏—Ö',
        url: `https://allo.ua/ua/search/?text=${encodeURIComponent(productName)}`
      },
      {
        name: 'Google Shopping',
        icon: 'üõí',
        description: getLocalizedMessage('google_shopping_description', '–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ü—ñ–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤'),
        url: `https://www.google.com/search?tbm=shop&q=${encodeURIComponent(productName)}&hl=uk`
      }
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π
    const filteredStores = allStores.filter(store => store.name !== currentStore);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    for (const store of filteredStores) {
      if (store.name === 'Rozetka') {
        store.price = currentPrice || await getExternalPrice('Rozetka', productName, currentPrice, region) || getLocalizedMessage('check_price', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É');
      } else if (store.name === 'Prom.ua') {
        store.price = await getExternalPrice('Prom.ua', productName, currentPrice, region) || getLocalizedMessage('browse_offers', '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó');
      } else if (store.name === 'Comfy') {
        store.price = await getExternalPrice('Comfy', productName, currentPrice, region) || getLocalizedMessage('check_price', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É');
      } else if (store.name === 'Foxtrot') {
        store.price = await getExternalPrice('Foxtrot', productName, currentPrice, region) || getLocalizedMessage('check_price', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É');
      } else if (store.name === 'Allo') {
        store.price = await getExternalPrice('Allo', productName, currentPrice, region) || getLocalizedMessage('check_price', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É');
      } else if (store.name === 'Google Shopping') {
        store.price = await getExternalPrice('Google Shopping', productName, currentPrice, region) || getLocalizedMessage('search_prices', '–ü–æ—à—É–∫ —Ü—ñ–Ω');
      }
    }
    
    stores = filteredStores;
  }
  // –ú–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –ï–≤—Ä–æ–ø—ã
  else if (region === 'europe') {
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
    const allStores = [
      {
        name: 'Amazon',
        icon: 'üì¶',
        description: getLocalizedMessage('amazon_description', 'Wide selection, fast delivery'),
        url: `https://www.amazon.${language === 'de' ? 'de' : language === 'fr' ? 'fr' : 'co.uk'}/s?k=${encodeURIComponent(productName)}`
      },
      {
        name: 'Idealo',
        icon: 'üîç',
        description: getLocalizedMessage('idealo_description', 'Find the best deals'),
        url: `https://www.idealo.${language === 'de' ? 'de' : 'com'}/search?q=${encodeURIComponent(productName)}`
      },
      {
        name: 'MediaMarkt',
        icon: 'üè™',
        description: '–ù—ñ–º–µ—Ü—å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏',
        url: `https://www.mediamarkt.de/de/search.html?query=${encodeURIComponent(productName)}`
      },
      {
        name: 'Saturn',
        icon: 'üõ∞Ô∏è',
        description: '–ù—ñ–º–µ—Ü—å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω—ñ–∫–∏',
        url: `https://www.saturn.de/de/search.html?query=${encodeURIComponent(productName)}`
      },
      {
        name: 'Zalando',
        icon: 'üëï',
        description: '–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–π –º–æ–¥–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω',
        url: `https://www.zalando.${language === 'de' ? 'de' : language === 'fr' ? 'fr' : 'com'}/search?q=${encodeURIComponent(productName)}`
      },
      {
        name: 'Google Shopping',
        icon: 'üõí',
        description: getLocalizedMessage('google_shopping_description', 'Compare prices from multiple stores'),
        url: `https://www.google.com/search?tbm=shop&q=${encodeURIComponent(productName)}&hl=${language}`
      }
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π
    const filteredStores = allStores.filter(store => store.name !== currentStore);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    for (const store of filteredStores) {
      if (store.name === 'Amazon') {
        store.price = currentPrice || await getExternalPrice('Amazon', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Idealo') {
        store.price = await getExternalPrice('Idealo', productName, currentPrice, region) || getLocalizedMessage('find_deals', 'Find deals');
      } else if (store.name === 'MediaMarkt') {
        store.price = await getExternalPrice('MediaMarkt', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Saturn') {
        store.price = await getExternalPrice('Saturn', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Zalando') {
        store.price = await getExternalPrice('Zalando', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Google Shopping') {
        store.price = await getExternalPrice('Google Shopping', productName, currentPrice, region) || getLocalizedMessage('search_prices', 'Search prices');
      }
    }
    
    stores = filteredStores;
  }
  // –ú–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –ê–º–µ—Ä–∏–∫–∏
  else {
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
    const allStores = [
      {
        name: 'Amazon',
        icon: 'üì¶',
        description: getLocalizedMessage('amazon_description', 'Wide selection, fast delivery'),
        url: `https://www.amazon.com/s?k=${encodeURIComponent(productName)}`
      },
      {
        name: 'eBay',
        icon: 'üõí',
        description: getLocalizedMessage('ebay_description', 'Online marketplace'),
        url: `https://www.ebay.com/sch/i.html?_nkw=${encodeURIComponent(productName)}`
      },
      {
        name: 'Walmart',
        icon: 'üè™',
        description: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏–π —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç',
        url: `https://www.walmart.com/search?q=${encodeURIComponent(productName)}`
      },
      {
        name: 'Best Buy',
        icon: 'üíª',
        description: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏',
        url: `https://www.bestbuy.com/site/searchpage.jsp?st=${encodeURIComponent(productName)}`
      },
      {
        name: 'Target',
        icon: 'üéØ',
        description: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏–π —Ä–æ–∑–¥—Ä—ñ–±–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω',
        url: `https://www.target.com/s?searchTerm=${encodeURIComponent(productName)}`
      },
      {
        name: 'Google Shopping',
        icon: 'üõí',
        description: getLocalizedMessage('google_shopping_description', 'Compare prices from multiple stores'),
        url: `https://www.google.com/search?tbm=shop&q=${encodeURIComponent(productName)}`
      }
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π
    const filteredStores = allStores.filter(store => store.name !== currentStore);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    for (const store of filteredStores) {
      if (store.name === 'Amazon') {
        store.price = currentPrice || await getExternalPrice('Amazon', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'eBay') {
        store.price = await getExternalPrice('eBay', productName, currentPrice, region) || getLocalizedMessage('browse_offers', 'Browse offers');
      } else if (store.name === 'Walmart') {
        store.price = await getExternalPrice('Walmart', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Best Buy') {
        store.price = await getExternalPrice('Best Buy', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Target') {
        store.price = await getExternalPrice('Target', productName, currentPrice, region) || getLocalizedMessage('check_price', 'Check price');
      } else if (store.name === 'Google Shopping') {
        store.price = await getExternalPrice('Google Shopping', productName, currentPrice, region) || getLocalizedMessage('search_prices', 'Search prices');
      }
    }
    
    stores = filteredStores;
  }

  return stores;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
function extractProductInfo() {
  const hostname = window.location.hostname;
  let name = document.title || 'Unknown Product';
  let price = '';
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Amazon
  if (hostname.includes('amazon')) {
    // Amazon price selectors
    const amazonPriceSelectors = [
      '.a-price-whole',
      '.a-price .a-offscreen',
      '.a-price-range .a-offscreen',
      '.a-price-symbol + .a-price-whole',
      '#price_inside_buybox',
      '#priceblock_dealprice',
      '#priceblock_ourprice',
      '.a-price-range',
      '.a-price .a-text-price',
      '.a-price-range .a-text-price',
      '.a-price .a-offscreen',
      '.a-price-range .a-offscreen'
    ];
    
    for (const selector of amazonPriceSelectors) {
      const priceElement = document.querySelector(selector);
      if (priceElement) {
        price = priceElement.textContent.trim();
        break;
      }
    }
    
    // Amazon product name selectors
    const amazonNameSelectors = [
      '#productTitle',
      '.product-title',
      '.a-size-large',
      '.a-size-medium',
      '.a-size-base'
    ];
    
    for (const selector of amazonNameSelectors) {
      const nameElement = document.querySelector(selector);
      if (nameElement) {
        name = nameElement.textContent.trim();
        break;
      }
    }
  }
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Rozetka
  else if (hostname.includes('rozetka')) {
    const rozetkaPriceSelectors = [
      '.product-price__big',
      '.product-price__current',
      '.price-value',
      '.product-price',
      '[data-testid="price"]',
      '.price',
      '.cost',
      '.product-cost',
      '.price-current',
      '.current-price',
      '.sale-price',
      '.regular-price',
      '.price-box .price',
      '.price-box .current-price',
      '.price-box .sale-price'
    ];
    
    for (const selector of rozetkaPriceSelectors) {
      const priceElement = document.querySelector(selector);
      if (priceElement) {
        price = priceElement.textContent.trim();
        break;
      }
    }
    
    // Rozetka product name selectors
    const rozetkaNameSelectors = [
      '.product__title',
      '.product-title',
      '.product-name',
      'h1',
      '.product__heading',
      '.product-heading',
      '.product__name',
      '.product-name',
      '.title',
      '.product-title-text'
    ];
    
    for (const selector of rozetkaNameSelectors) {
      const nameElement = document.querySelector(selector);
      if (nameElement) {
        name = nameElement.textContent.trim();
        break;
      }
    }
  }
  // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
  else {
    const priceSelectors = [
      '.price-value',
      '.product-price',
      '[data-testid="price"]',
      '.price',
      '.cost',
      '.product-cost',
      '.price-current',
      '.current-price',
      '.sale-price',
      '.regular-price'
    ];
    
    for (const selector of priceSelectors) {
      const priceElement = document.querySelector(selector);
      if (priceElement) {
        price = priceElement.textContent.trim();
        break;
      }
    }
  }

  return { name, price };
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Chrome API
function safeChromeCall(apiCall, fallback) {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  updateContextState();
  
  if (!window.mindfulShopperContext.isValid) {
    console.warn('Extension context invalidated, using fallback');
    if (fallback) fallback();
    return;
  }
  
  try {
    apiCall();
  } catch (error) {
    console.warn('Chrome API call failed:', error);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    updateContextState();
    if (fallback) fallback();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ wishlist
function addToWishlist(itemName, productInfo) {
  const timestamp = Date.now();
  const fullName = productInfo.price ? `${itemName} - ${productInfo.price}` : itemName;

  safeChromeCall(() => {
  chrome.storage.local.get(['wishlist', 'decisionDelayHours'], (data) => {
      if (chrome.runtime.lastError) {
        console.warn('Storage error:', chrome.runtime.lastError);
        showNotification('Error saving to wishlist', 'warning');
        return;
      }

      const existingWishlist = data.wishlist || [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
      const isAlreadyAdded = existingWishlist.some(item => item.name === fullName);
      
      if (isAlreadyAdded) {
        showNotification('Already in wishlist', 'warning');
        return;
      }

      const updatedList = [...existingWishlist, { name: fullName, addedAt: timestamp }];
      
      chrome.storage.local.set({ wishlist: updatedList }, () => {
        if (chrome.runtime.lastError) {
          console.warn('Storage save error:', chrome.runtime.lastError);
          showNotification('Error saving to wishlist', 'warning');
          return;
        }

    const delayMinutes = (data.decisionDelayHours || 24) * 60;
        
        chrome.alarms.create(`reminder-${fullName}`, {
      delayInMinutes: delayMinutes
        }, () => {
          if (chrome.runtime.lastError) {
            console.warn('Alarm creation error:', chrome.runtime.lastError);
          }
        });

        showNotification(`Added to wishlist (${data.decisionDelayHours || 24}h)`, 'success');
      });
    });
  }, () => {
    // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    showNotification('Extension context invalid - please reload the page', 'warning');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    z-index: 2147483647 !important;
    background: ${type === 'success' ? '#4CAF50' : type === 'warning' ? '#ff9800' : '#2196F3'};
    color: white !important;
    padding: 12px 20px !important;
    border-radius: 8px !important;
    font-size: 14px !important;
    font-weight: bold !important;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3) !important;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
function interceptBuyButtons() {
  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Rozetka)
  const buyButtonSelectors = [
    // Rozetka specific selectors
    'button[data-testid="buy-button"]',
    'button[data-testid="purchase-button"]',
    '.buy-button',
    '.purchase-button',
    '.add-to-cart',
    '.order-button',
    // Generic selectors
    'button[data-testid*="buy"]',
    'button[data-testid*="purchase"]',
    'button[data-testid*="add-to-cart"]',
    'button[data-testid*="order"]',
    // Text-based selectors (more reliable)
    'button:contains("–ö—É–ø–∏—Ç—å")',
    'button:contains("Buy")',
    'button:contains("Add to cart")',
    'button:contains("Order")',
    'button:contains("Purchase")',
    'button:contains("–ó–∞–∫–∞–∑–∞—Ç—å")',
    'button:contains("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")',
    'button:contains("–ü–µ—Ä–µ–¥–∑–∞–º–æ–≤–∏—Ç–∏")',
    'button:contains("–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫")',
    'a[href*="buy"]',
    'a[href*="purchase"]',
    'a[href*="order"]',
    'a[href*="cart"]'
  ];

  buyButtonSelectors.forEach(selector => {
    try {
      const buttons = document.querySelectorAll(selector);
      buttons.forEach(button => {
        if (!button.dataset.mindfulIntercepted) {
          button.dataset.mindfulIntercepted = 'true';
          
          const originalClick = button.onclick;
          const originalHref = button.href;
          
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
            window.lastBuyButton = button;
            window.lastBuyButtonOriginalClick = originalClick;
            window.lastBuyButtonOriginalHref = originalHref;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à popup
            createMindfulPopup();
          });
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
function interceptBuyButtonsByText() {
  const { region } = detectRegionAndLanguage();
  
  let buyTexts = [];
  
  if (region === 'ukraine') {
    buyTexts = [
      '–ö—É–ø–∏—Ç—å', '–ö—É–ø–∏—Ç–∏', '–ó–∞–∫–∞–∑–∞—Ç—å', '–ó–∞–º–æ–≤–∏—Ç–∏', 
      '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 
      '–ü–µ—Ä–µ–¥–∑–∞–º–æ–≤–∏—Ç–∏', '–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫',
      '–í –∫–æ—à–∏–∫', '–í –∫–æ—Ä–∑–∏–Ω—É', '–î–æ –∫–æ—à–∏–∫–∞',
      '–ö—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑', '–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å',
      '–û—Ñ–æ—Ä–º–∏—Ç–∏', '–û—Ñ–æ—Ä–º–∏—Ç—å', '–ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑'
    ];
  } else if (region === 'europe') {
    buyTexts = [
      'Buy', 'Kaufen', 'Acheter', 'Comprar',
      'Add to cart', 'In den Warenkorb', 'Ajouter au panier',
      'Order', 'Bestellen', 'Commander', 'Pedir',
      'Purchase', 'Kauf', 'Achat', 'Compra',
      'Jetzt kaufen', 'Acheter maintenant', 'Comprar ahora'
    ];
  } else {
    buyTexts = [
      'Buy', 'Add to cart', 'Order', 'Purchase',
      'Buy now', 'Add to basket', 'Add to cart',
      'Purchase now', 'Order now', 'Buy it now'
    ];
  }

  // –ë–æ–ª–µ–µ —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫
  const allButtons = document.querySelectorAll('button, a, input[type="button"], input[type="submit"], [role="button"]');
  
  allButtons.forEach(button => {
    const text = button.textContent?.trim() || button.value?.trim() || '';
    const ariaLabel = button.getAttribute('aria-label') || '';
    const title = button.getAttribute('title') || '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç, aria-label –∏ title
    const allText = `${text} ${ariaLabel} ${title}`.toLowerCase();
    
    if (buyTexts.some(buyText => allText.includes(buyText.toLowerCase()))) {
      if (!button.dataset.mindfulIntercepted) {
        button.dataset.mindfulIntercepted = 'true';
        
        const originalClick = button.onclick;
        const originalHref = button.href;
        
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          window.lastBuyButton = button;
          window.lastBuyButtonOriginalClick = originalClick;
          window.lastBuyButtonOriginalHref = originalHref;
          
          createMindfulPopup();
        });
      }
    }
  });
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Amazon
function interceptAmazonButtons() {
  // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ Amazon –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
  const amazonSelectors = [
    // Amazon specific selectors
    'input[value="Add to Basket"]',
    'input[value="Add to Cart"]',
    'input[value="Buy now"]',
    'input[value="Buy Now"]',
    'input[value="Add to basket"]',
    'input[value="Add to cart"]',
    'input[value="Buy now with 1-Click"]',
    'input[value="Buy Now with 1-Click"]',
    'input[value="Add to List"]',
    'input[value="Add to list"]',
    // Button selectors
    'button[data-testid="add-to-cart-button"]',
    'button[data-testid="buy-now-button"]',
    'button[data-testid="add-to-basket-button"]',
    'button[data-testid="buy-button"]',
    'button[data-testid="purchase-button"]',
    // Class-based selectors
    'button[class*="add-to-cart"]',
    'button[class*="buy-now"]',
    'button[class*="add-to-basket"]',
    'button[class*="buy-button"]',
    'button[class*="purchase"]',
    // ID-based selectors
    'button[id*="add-to-cart"]',
    'button[id*="buy-now"]',
    'button[id*="add-to-basket"]',
    'button[id*="buy-button"]',
    'button[id*="purchase"]',
    // Link selectors
    'a[href*="add-to-cart"]',
    'a[href*="buy-now"]',
    'a[href*="add-to-basket"]',
    'a[href*="buy-button"]',
    'a[href*="purchase"]'
  ];

  amazonSelectors.forEach(selector => {
    try {
      const buttons = document.querySelectorAll(selector);
      buttons.forEach(button => {
        if (!button.dataset.mindfulIntercepted) {
          button.dataset.mindfulIntercepted = 'true';
          
          const originalClick = button.onclick;
          const originalHref = button.href;
          
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            window.lastBuyButton = button;
            window.lastBuyButtonOriginalClick = originalClick;
            window.lastBuyButtonOriginalHref = originalHref;
            
            createMindfulPopup();
          });
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    }
  });
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Rozetka
function interceptRozetkaButtons() {
  // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ Rozetka –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
  const rozetkaSelectors = [
    // Rozetka specific selectors
    'button[data-testid="buy-button"]',
    'button[data-testid="purchase-button"]',
    'button[data-testid="add-to-cart"]',
    'button[data-testid="order-button"]',
    '.buy-button',
    '.purchase-button',
    '.add-to-cart',
    '.order-button',
    '.product-buy-button',
    '.product-purchase-button',
    '.product-add-to-cart',
    '.product-order-button',
    // Rozetka class patterns
    'button[class*="buy"]',
    'button[class*="purchase"]',
    'button[class*="order"]',
    'button[class*="cart"]',
    'a[class*="buy"]',
    'a[class*="purchase"]',
    'a[class*="order"]',
    'a[class*="cart"]',
    // Generic selectors that work on Rozetka
    'button[type="submit"]',
    'input[type="submit"]',
    'button[class*="btn"]',
    'a[class*="btn"]'
  ];

  rozetkaSelectors.forEach(selector => {
    try {
      const buttons = document.querySelectorAll(selector);
      buttons.forEach(button => {
        if (!button.dataset.mindfulIntercepted) {
          button.dataset.mindfulIntercepted = 'true';
          
          const originalClick = button.onclick;
          const originalHref = button.href;
          
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            window.lastBuyButton = button;
            window.lastBuyButtonOriginalClick = originalClick;
            window.lastBuyButtonOriginalHref = originalHref;
            
            createMindfulPopup();
          });
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫
function initBuyButtonInterception() {
  const hostname = window.location.hostname;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ Amazon
  if (hostname.includes('amazon')) {
    console.log('Amazon detected, using specialized selectors');
    interceptAmazonButtons();
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ Rozetka
  else if (hostname.includes('rozetka')) {
    console.log('Rozetka detected, using specialized selectors');
    interceptRozetkaButtons();
  }
  
  // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
  interceptBuyButtons();
  interceptBuyButtonsByText();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function safeInit() {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    updateContextState();
    
    if (!window.mindfulShopperContext.isValid) {
      console.warn('Extension context invalid, skipping initialization');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
    if (window.mindfulShopperContext.initialized) {
      console.log('Extension already initialized, skipping');
      return;
    }
    
    initBuyButtonInterception();
    window.mindfulShopperContext.initialized = true;
    console.log('Mindful Shopper initialized successfully');
  } catch (error) {
    console.warn('Initialization error:', error);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    updateContextState();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'getProductInfo') {
    const productInfo = extractProductInfo();
    sendResponse(productInfo);
  }
});

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
try {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInit);
  } else {
    safeInit();
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è –¥–ª—è Rozetka)
  const delay = window.location.hostname.includes('rozetka') ? 5000 : 2000;
  setTimeout(safeInit, delay);

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL (–¥–ª—è SPA)
  let lastUrl = location.href;
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      setTimeout(safeInit, 1000);
    }
  }).observe(document, { subtree: true, childList: true });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  window.addEventListener('unhandledrejection', (event) => {
    if (event.reason && event.reason.message && event.reason.message.includes('Extension context invalidated')) {
      console.warn('Extension context invalidated, updating state...');
      updateContextState();
    }
  });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è –¥–ª—è Rozetka)
  const checkInterval = window.location.hostname.includes('rozetka') ? 60000 : 30000;
  setInterval(() => {
    const wasValid = window.mindfulShopperContext.isValid;
    updateContextState();
    
    if (wasValid && !window.mindfulShopperContext.isValid) {
      console.warn('Extension context became invalid, resetting initialization');
      window.mindfulShopperContext.initialized = false;
    }
  }, checkInterval);
} catch (error) {
  console.warn('Content script initialization error:', error);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const errorNotification = document.createElement('div');
  errorNotification.style.cssText = `
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    z-index: 2147483647 !important;
    background: #ff4444 !important;
    color: white !important;
    padding: 12px 20px !important;
    border-radius: 8px !important;
    font-size: 14px !important;
    font-weight: bold !important;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3) !important;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
  `;
  errorNotification.textContent = 'Extension error - please reload the page';
  document.body.appendChild(errorNotification);
  
  setTimeout(() => {
    errorNotification.remove();
  }, 5000);
}